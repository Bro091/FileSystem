
#include <iostream>
#include <fstream> // file stream - библиотека
// позволяющая взаимодействовать с файловой системой компьютера
#include <string>

bool print_file(std::string file_path) {
	std::ifstream in;
	in.open(file_path);

	if (in.is_open()) {
		char sym;
		while (in.get(sym))
			std::cout << sym;
		in.close();
		std::cout << std::endl;
		return true;
	}
	return false;
}

bool clear_file(std::string file_path) {
	std::ofstream clear;
	clear.open(file_path);

	if (clear.is_open()) {
		clear.close();
		return true;
	}
	return false;
}

bool statistic(std::string word);

int main() {
	setlocale(LC_ALL, "Russian");
	int n;
	std::string path = "file.txt"; // строковый файл path - путь

	// Класс ofstream
	/*// Первый способ открытия файла - метод
	std::ofstream out; // Объект класса ofstream для записи данных в файл
	out.open(path, std::ios::app); // открытие файла в режиме app

	//Второй способ открытия файла - конструктор
	//std::ofstream out(path); 

	if (out.is_open()) { //проверка файла на открытие
		std::cout << "Файл открыт для записи.\n";
		std::string str;
		std::cout << "Введите строку -> ";
		std::getline(std::cin, str);
		out << str << '\n'; // добавление информации в файл
		std::cout << "Запись добавлена в файл.\n";
	}
	else
		std::cout << "Ошибка открытя файла.\n";


	// Возможные причины ошибок при открытии файла
	// 1. Неправильный синтаксис указания пути к файлу;
	// 2. Нет доступа к файлу;
	// 3. Файл открыт дргуим объектом или приложением.

	out.close(); // Закрытие файла и очистка объекта out. если написали out.open то в любом случае нужно вызывать out.close */

	// Класс ifstream
	/*std::ifstream in;
	in.open(path);

	if (in.is_open()) {
		std::cout << "Файл открыт для чтения.\n";
		std::cout << "Содержимое файла:\n";
		std::string file_text;

	// Посимвольное считывание
	// char sym;
	// while (in.get(sym))
	//	std::cout << sym; // вывод текста из файла
	// file_text += sym;  // вывод текста из файла с записыванием (сохранением) текста в строку
	// std::cout << file_text << std::endl;

	// Пословное считывание
	//	while (!in.eof()) { // eof - end of file, !if.eof - пока не конец файла
	//		std::string tmp;
	//		in >> tmp;
	//		file_text += tmp + '\n';
	//	}
	//	std::cout << file_text << std::endl;

		// Построчное считывание
		std::string line;
		while (std::getline(in, line))
		file_text += line + '\n';
		std::cout << file_text << std::endl;
	
	 }
	 else
		 std::cout << "Ошибка открытя файла.\n";

	//Возможные причины ошибок при открытии файла для чтения
	// 1. Неправильный синтаксис указания пути к файлу;
	// 2. Нет доступа к файлу;
	// 3. Файла не существует.
		
	in.close();*/

	// Удаление файла
	/*if (remove(path.c_str()) == 0) // врзвращается символьный char массив, то есть возвращается указатель
		std::cout << "Файл \"" << path << "\"удален.\n";
	else
		std::cout << "Ошибка удаления файла.\n";

	//Возможные причины ошибок при удалении файла для чтения
	// 1. Неправильный синтаксис указания пути к файлу;
	// 2. Нет доступа к файлу;
	// 3. Файла не существует;
	// 4. Если файл открыт.*/

	// Задача 1-2. Слова в файл
	std::cout << "Задача 1.\n";

	int action;

	do {
		std::cout << "Выберите действие: \n";
		std::cout << "1. Добавление статистки в файл; \n";
		std::cout << "2. Вывод файла; \n";
		std::cout << "3. Очистка файла; \n";
		std::cout << "4. Завершение работы; \n";
		std::cout << "Введите номер действия -> \n";
		std::cin >> action;

		std::string str1;
		
		switch (action) {
		
		case 1:
			std::cout << "Введите строку -> ";
			std::cin.ignore();
			std::getline(std::cin, str1);

			if (statistic(str1))
				std::cout << "Запись добавлена в файл.\n\n";
			else
				std::cout << "Ошибка выполнения функции.\n\n";
			break;
		case 2:
			std::cout << "Содердимое файла:\n";
			print_file("stats.txt");
			break;
		case 3:
			clear_file("stats.txt");
			std::cout << "Файл очищен.\n\n";
			break;
		case 4:
			std::cout << "Программа завершена.\n\n";
			break;
		default:
			std::cout << "Ошибка ввода.\n\n";
		}	
	} while (action != 4);

	return 0;

}

bool statistic(std::string word) {
	std::ofstream  out;
	out.open("stats.txt", std::ios::app);

	if (out.is_open()) {
		out << word << ' ' << word.length() << '\n';
		out.close();
		return true;
	}
	return false;
}